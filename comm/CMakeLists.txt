cmake_minimum_required(VERSION 3.5.1)

project(benchmarking)

find_package(Qt5Core REQUIRED)
find_package(rclcpp REQUIRED)
find_package(ros2eval_msgs REQUIRED)
find_package(rcl REQUIRED)


set(CMAKE_AUTOMOC TRUE)
set(CMAKE_COLOR_MAKEFILE ON)
set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")
include_directories(.)
#add_definitions(-std=c++11 -Wall -Wextra)
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

add_subdirectory(common)
if(COMM_ROS2_FASTRTPS OR COMM_ROS2_OPENSPLICE OR COMM_ROS2_CONNEXT)
  include_directories(${rclcpp_INCLUDE_DIRS})
  link_directories(${rclcpp_LIBRARIES})
  include_directories(${ros2eval_msgs_INCLUDE_DIRS})
  link_directories(${ros2eval_msgs_LIBRARIES})
  include_directories(${rcl_INCLUDE_DIRS})
  link_directories(${rcl_LIBRARIES})

  add_subdirectory(ros2node)
endif()
if(COMM_ROS)
  include_directories(/opt/ros/kinetic/include)
  link_directories(/opt/ros/kinetic/lib) #TODO
  add_subdirectory(ros1node/messages)
  add_subdirectory(ros1node)
endif()
if(COMM_OPENSPLICE)
  add_subdirectory(ddsnode)
  include_directories(${OpenSplice_INCLUDE_DIRS})
endif()
add_subdirectory(scenarios)
